import{_ as s,o as a,c as e,h as n}from"./app.06eb71f5.js";const C=JSON.parse('{"title":"7天复习js-day1","description":"","frontmatter":{"title":"7天复习js-day1","author":"Younglina","date":"2023-07-11","categories":["复习"],"tags":["javascript"]},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"原始类型","slug":"原始类型","link":"#原始类型","children":[]},{"level":3,"title":"引用类型","slug":"引用类型","link":"#引用类型","children":[]},{"level":3,"title":"存储方式","slug":"存储方式","link":"#存储方式","children":[]}]}],"relativePath":"write/relearn-js/day1.md","lastUpdated":1689084611000}'),l={name:"write/relearn-js/day1.md"},o=n(`<h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h2><h3 id="原始类型" tabindex="-1">原始类型 <a class="header-anchor" href="#原始类型" aria-hidden="true">#</a></h3><ul><li>number(数字)：整数和浮点数</li><li>string(字符串)：一串字符</li><li>boolean(布尔值)：true或false</li><li>null：一个特殊的值，表示“空”</li><li>undefined：一个特殊的值，表示“未定义”</li><li>Symbol：ECMAScript 6中新增的数据类型，表示唯一的标识符</li></ul><h3 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-hidden="true">#</a></h3><ul><li>object(对象)：一组数据和功能的集合</li><li>array(数组)：一组有序的数据集合，可以通过索引访问</li><li>function(函数)：一段可执行的代码，可以通过调用来实现特定的功能</li><li>Map、Set、WeakMap、WeakSet：ES6新增的集合类型</li></ul><h3 id="存储方式" tabindex="-1">存储方式 <a class="header-anchor" href="#存储方式" aria-hidden="true">#</a></h3><ol><li><p><strong>原始类型</strong></p><p>原始类型的值存在于<code>栈内存</code>中，它们是<code>按值</code>访问的，当创建一个原始类型的变量时，内存中会分配一块空间来存储该变量的<code>值</code>，当把一个原始类型的变量赋值给另一个变量时，实际是把这个值复制了一份，所以，<code>原始类型的值</code>在存储上是<code>独立的</code>。</p><p><strong>赋值过程</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">49</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span></span>
<span class="line"><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>栈内存过程</strong><img src="https://raw.githubusercontent.com/Younglina/images/master/day1-1.png" alt=""></p></li><li><p><strong>引用类型</strong></p><p>引用类型的值存在于<code>堆内存</code>中，它们是<code>按引用</code>访问的，指向堆的<code>引用地址</code>在<code>栈内存</code>中存储，当创建一个引用类型的变量时，内存中会分配一块空间来存储该变量的<code>引用</code>，这个引用指向存储在堆内存中的实际对象。当把一个引用类型的变量赋值给另一个变量时，实际是把这个引用复制了一份，而不是整个对象。<code>引用类型的</code>值在存储上是<code>共享的</code>，它们指向同一个实际对象，所以，任何对该对象的修改都会影响多有引用它的变量。</p><p><strong>赋值过程</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">younglina</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>栈内存过程</strong><img src="https://raw.githubusercontent.com/Younglina/images/master/day2-2.png" alt=""></p></li></ol>`,7),t=[o];function p(r,c,i,d,u,h){return a(),e("div",null,t)}const g=s(l,[["render",p]]);export{C as __pageData,g as default};
