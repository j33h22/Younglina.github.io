import{_ as s,o as a,c as l,h as n}from"./app.06eb71f5.js";const A=JSON.parse('{"title":"NodeJS","description":"","frontmatter":{"title":"NodeJS","author":"Younglina","date":"2023-04-03","categories":["学习","nodejs"],"tags":["fs"]},"headers":[{"level":2,"title":"fs模块","slug":"fs模块","link":"#fs模块","children":[{"level":3,"title":"fs.readFile","slug":"fs-readfile","link":"#fs-readfile","children":[]},{"level":3,"title":"fs.writeFile","slug":"fs-writefile","link":"#fs-writefile","children":[]}]},{"level":2,"title":"path模块","slug":"path模块","link":"#path模块","children":[{"level":3,"title":"path.join","slug":"path-join","link":"#path-join","children":[]}]}],"relativePath":"write/nodejs/modules.md","lastUpdated":1680620853000}'),e={name:"write/nodejs/modules.md"},o=n(`<h2 id="fs模块" tabindex="-1">fs模块 <a class="header-anchor" href="#fs模块" aria-hidden="true">#</a></h2><h3 id="fs-readfile" tabindex="-1">fs.readFile <a class="header-anchor" href="#fs-readfile" aria-hidden="true">#</a></h3><p><code>fs.readFile()</code> 是 <code>Node.js</code> 中 <code>fs</code> 模块提供的一个异步方法，用于读取文件内容。<br> 它的语法如下： <strong>fs.readFile(path[, options], callback)</strong><br> 其中：</p><ul><li>path：要读取的文件的路径，可以是相对路径或绝对路径。</li><li>options：一个可选参数，是一个对象，用于指定文件编码、文件打开模式等。常用的选项有： <ul><li>encoding：指定文件编码，默认为 null，即返回原始的 buffer 对象。</li><li>flag：指定文件打开模式，默认为 &#39;r&#39;，表示以读取模式打开文件。</li></ul></li><li>callback：一个回调函数，用于处理读取文件后的结果。回调函数有两个参数： <ul><li>err：如果读取文件出错，该参数为一个 Error 对象，否则为 null。</li><li>data：读取文件的内容，如果设置了 encoding 选项，则为字符串类型，否则为 Buffer 类型。</li></ul></li></ul><p>使用 <code>fs.readFile()</code> 方法时，可以通过回调函数获取读取的文件内容。例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">file.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面的例子中，<code>fs.readFile()</code> 方法读取了当前目录下的 <code>file.txt</code> 文件，并将其内容打印到控制台上。<br> 由于设置了 <code>encoding</code> 选项为 <code>&#39;utf8&#39;</code>，因此返回的 <code>data</code> 参数为字符串类型。<br> 如果未设置 <code>encoding</code> 选项，则返回的 <code>data</code> 参数为 <code>Buffer</code> 类型。<br><code>fs.readFile()</code> 方法是异步的，因此需要在回调函数中处理读取文件后的结果。 可以使用 <code>fs.readFileSync()</code> 方法同步读取文件。</p><h3 id="fs-writefile" tabindex="-1">fs.<strong>writeFile</strong> <a class="header-anchor" href="#fs-writefile" aria-hidden="true">#</a></h3><p><code>fs.writeFile()</code> 是 <code>Node.js</code> 中 <code>fs</code> 模块提供的一个异步方法，用于将数据写入文件。<br> 它的语法如下：<strong>fs.writeFile(file, data[, options], callback)</strong><br> 其中：</p><ul><li>file：要写入的文件的路径，可以是相对路径或绝对路径。</li><li>data：要写入的数据，可以是字符串、Buffer 或 Uint8Array 类型。</li><li>options：一个可选参数，是一个对象，用于指定文件编码、文件打开模式等。常用的选项有： <ul><li>encoding：指定文件编码，默认为 &#39;utf8&#39;。</li><li>mode：指定文件的权限，默认为 0o666。</li><li>flag：指定文件打开模式，默认为 &#39;w&#39;，表示以写入模式打开文件。</li></ul></li><li>callback：一个回调函数，用于处理写入文件后的结果。回调函数有一个参数： <ul><li>err：如果写入文件出错，该参数为一个 Error 对象，否则为 null。</li></ul></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeFile</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">file.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello, world!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The file has been saved!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面的例子中，<code>fs.writeFile()</code> 方法将字符串 <code>&#39;Hello, world!&#39;</code> 写入当前目录下的 <code>file.txt</code> 文件。<br> 如果写入成功，控制台将输出 <code>&#39;The file has been saved!&#39;。</code><br><code>fs.writeFile()</code> 方法是异步的，因此需要在回调函数中处理写入文件后的结果。<br> 可以使用 <code>fs.writeFileSync()</code> 方法同步写入文件。</p><h2 id="path模块" tabindex="-1">path模块 <a class="header-anchor" href="#path模块" aria-hidden="true">#</a></h2><h3 id="path-join" tabindex="-1">path.join <a class="header-anchor" href="#path-join" aria-hidden="true">#</a></h3><p><code>__dirname</code>是<code>Node.js</code>中的一个全局变量，它表示当前模块的目录名。<br> 具体来说，它包含当前模块文件所在的目录的绝对路径，而不包括当前模块文件本身的名称。<br> 通常配合<code>path.join</code>使用</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">***.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,16),p=[o];function r(t,c,i,d,D,F){return a(),l("div",null,p)}const C=s(e,[["render",r]]);export{A as __pageData,C as default};
